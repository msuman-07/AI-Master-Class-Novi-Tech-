import pandas as pd
import numpy as np 
import warnings
warnings.filterwarnings ('ignore')

#Data Collection
df = pd.read_excel("D:\AI MasterClass\Open CV\heart_disease_dataset.xlsx")#Dataset loaded
print (df)

#Used Supervised Learning through Classification Model 

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['Sex'] = le.fit_transform (df['Sex'])
df ['ChestPainType'] = le.fit_transform (df ['ChestPainType'])
df ['RestingECG'] = le.fit_transform (df ['RestingECG'])
df ['ExerciseAngina'] = le.fit_transform (df ['ExerciseAngina'])
df ['ST_Slope'] = le.fit_transform (df['ST_Slope'])

print (df)

x=df.drop(columns=['HeartDisease']) #Input

y=df['HeartDisease'] #Output

print("XXXX",x)
print("YYYY",y)

#80% dataset used for training
#20% dataset used for testing

from sklearn.model_selection import train_test_split #sklearn model used with imported library
x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=11) #split the data

#X_train - 80% input data
#Y_train - 80% output data
#X_test  - 20% input data
#Y_train - 20% output data


print ("DF", df.shape)
print ("x_train", x_train.shape)
print ("x_test",x_test.shape)
print ("y_train", y_train.shape)
print ("y_test", y_test.shape)

#Model Training

from sklearn.naive_bayes import GaussianNB
NB = GaussianNB()

NB.fit(x_train, y_train)

#Model Evaluation

y_pred = NB.predict(x_test)

print("y_pred",y_pred)
print("y_test",y_test)

from sklearn.metrics import accuracy_score #imported metrics and accuracy metrics output
print ('ACCURACY is', accuracy_score (y_test, y_pred))


#Model Prediction

testPrediction = NB.predict([[19,1,4,120,166,0,1,138,0,0,2]])
if testPrediction==1:
    print ("The Patient Have Heart Disease, please consult the Doctor")
else:
    print ("The Patient is Normal")
